import * as fs from 'fs';
import * as path from 'path';
import msgpack5 from 'msgpack5';

type SudokuPatternModelBlock = [number, number][];
type SudokuPatternModel = SudokuPatternModelBlock[][];
type GetPatternModelBlockFunction = (i: number, j: number, order: number) => SudokuPatternModelBlock;

/**
 * Writes pattern model to file
 * @param patternModel
 * @param order
 * @param patternName
 */
function writeToFile(patternModel: SudokuPatternModel, patternName: string) {
    const order = patternModel.length;
    const filePath = path.resolve(__dirname, '..', 'pattern-models', `${order}`, `${patternName}`);
    const buff = msgpack5().encode(patternModel);

    fs.writeFile(filePath, buff.toString(`binary`), 'binary', function (err) {
        if (err) {
            console.log(`Failed generating pattern model file: ${filePath}`);
            process.exit(1);
        }

        console.log(`Generated ${filePath}`);
    });
}

/**
 * Generates pattern model
 * @param order order size of board side
 * @param getPatternModelBlock function that gets block's coordinates based on current coordinate
 * @returns
 */
function generatePatternModel(order: number, getPatternModelBlock: GetPatternModelBlockFunction): SudokuPatternModel {
    const sudokuPatternModel: SudokuPatternModel = Array.from({ length: order }, () =>
        Array.from({ length: order }, () => [])
    );

    for (let i = 0; i < order; i++) {
        for (let j = 0; j < order; j++) {
            const edgeSet: Set<string> = new Set();

            for (let k = 0; k < order; k++) {
                edgeSet.add(`${k}_${j}`);
                edgeSet.add(`${i}_${k}`);
            }

            for (const blockItem of getPatternModelBlock(i, j, order)) {
                edgeSet.add(`${blockItem[0]}_${blockItem[1]}`);
            }

            edgeSet.delete(`${i}_${j}`);

            sudokuPatternModel[i][j] = [...edgeSet.values()]
                .map((index) => index.split('_').map((x) => parseInt(x)))
                .map((pair) => [pair[0], pair[1]]);
        }
    }

    return sudokuPatternModel;
}

/**
 * Blocks are sqrt(order) x sqrt(order)
 * Valid orders: 4, 9, 16
 */
function getAnyRegular(i: number, j: number, order: number): SudokuPatternModelBlock {
    const coordinates: SudokuPatternModelBlock = [];
    const root = Math.floor(Math.sqrt(order));
    const iMult = Math.floor(i / root);
    const jMult = Math.floor(j / root);

    for (let k = root * iMult; k < root * iMult + root; k++) {
        for (let l = root * jMult; l < root * jMult + root; l++) {
            coordinates.push([k, l]);
        }
    }

    return coordinates;
}

function get5x5Cross(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
        ],
        [
            [2, 0],
            [3, 0],
            [4, 0],
            [3, 1],
            [4, 1],
        ],
        [
            [2, 1],
            [1, 2],
            [2, 2],
            [3, 2],
            [2, 3],
        ],
        [
            [0, 3],
            [1, 3],
            [0, 4],
            [1, 4],
            [2, 4],
        ],
        [
            [4, 2],
            [3, 3],
            [4, 3],
            [3, 4],
            [4, 4],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get6x6Brickwall(i: number, j: number): SudokuPatternModelBlock {
    const blocks = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
        ],
        [
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 0],
            [3, 1],
            [3, 2],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [5, 0],
            [5, 1],
            [5, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [0, 5],
            [1, 3],
            [1, 4],
            [1, 5],
        ],
        [
            [2, 3],
            [2, 4],
            [2, 5],
            [3, 3],
            [3, 4],
            [3, 5],
        ],
        [
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 3],
            [5, 4],
            [5, 5],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get6x6Ladder(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
            [0, 2],
            [0, 3],
        ],
        [
            [1, 2],
            [1, 3],
            [0, 4],
            [0, 5],
            [1, 4],
            [1, 5],
        ],
        [
            [2, 0],
            [2, 1],
            [3, 0],
            [3, 1],
            [2, 2],
            [2, 3],
        ],
        [
            [3, 2],
            [3, 3],
            [2, 4],
            [2, 5],
            [3, 4],
            [3, 5],
        ],
        [
            [4, 0],
            [4, 1],
            [5, 0],
            [5, 1],
            [4, 2],
            [4, 3],
        ],
        [
            [5, 2],
            [5, 3],
            [4, 4],
            [4, 5],
            [5, 4],
            [5, 5],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get7x7Diagonal(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
            [2, 1],
            [2, 2],
            [1, 2],
        ],
        [
            [0, 2],
            [0, 3],
            [0, 4],
            [0, 5],
            [1, 3],
            [1, 4],
            [1, 5],
        ],
        [
            [2, 0],
            [3, 0],
            [4, 0],
            [5, 0],
            [6, 0],
            [3, 1],
            [4, 1],
        ],
        [
            [3, 2],
            [4, 2],
            [2, 3],
            [3, 3],
            [4, 3],
            [2, 4],
            [3, 4],
        ],
        [
            [2, 5],
            [3, 5],
            [0, 6],
            [1, 6],
            [2, 6],
            [3, 6],
            [4, 6],
        ],
        [
            [5, 1],
            [5, 2],
            [5, 3],
            [6, 1],
            [6, 2],
            [6, 3],
            [6, 4],
        ],
        [
            [4, 4],
            [4, 5],
            [5, 4],
            [5, 5],
            [6, 5],
            [6, 6],
            [5, 6],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get8x8Brickwall(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3],
        ],
        [
            [2, 0],
            [2, 1],
            [2, 2],
            [2, 3],
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
        ],
        [
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
        ],
        [
            [0, 4],
            [0, 5],
            [0, 6],
            [0, 7],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
        ],
        [
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
        ],
        [
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
        ],
        [
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get8x8Ladder(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
            [2, 0],
            [2, 1],
            [3, 0],
            [3, 1],
        ],
        [
            [4, 0],
            [4, 1],
            [5, 0],
            [5, 1],
            [6, 0],
            [6, 1],
            [7, 0],
            [7, 1],
        ],
        [
            [0, 2],
            [0, 3],
            [0, 4],
            [0, 5],
            [1, 2],
            [1, 3],
            [1, 4],
            [1, 5],
        ],
        [
            [2, 2],
            [2, 3],
            [2, 4],
            [2, 5],
            [3, 2],
            [3, 3],
            [3, 4],
            [3, 5],
        ],
        [
            [4, 2],
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
        ],
        [
            [6, 2],
            [6, 3],
            [6, 4],
            [6, 5],
            [7, 2],
            [7, 3],
            [7, 4],
            [7, 5],
        ],
        [
            [0, 6],
            [0, 7],
            [1, 6],
            [1, 7],
            [2, 6],
            [2, 7],
            [3, 6],
            [3, 7],
        ],
        [
            [4, 6],
            [4, 7],
            [5, 6],
            [5, 7],
            [6, 6],
            [6, 7],
            [7, 6],
            [7, 7],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get8x8Cross(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
        ],
        [
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
        ],
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
            [2, 0],
            [2, 1],
            [0, 2],
            [1, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [1, 3],
            [1, 4],
            [2, 2],
            [2, 3],
            [2, 4],
            [2, 5],
        ],
        [
            [0, 5],
            [0, 6],
            [0, 7],
            [1, 5],
            [1, 6],
            [1, 7],
            [2, 6],
            [2, 7],
        ],
        [
            [5, 0],
            [5, 1],
            [6, 0],
            [6, 1],
            [7, 0],
            [7, 1],
            [6, 2],
            [7, 2],
        ],
        [
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
            [6, 3],
            [6, 4],
            [7, 3],
            [7, 4],
        ],
        [
            [5, 6],
            [5, 7],
            [6, 6],
            [6, 7],
            [7, 6],
            [7, 7],
            [6, 5],
            [7, 5],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get10x10Brickwall(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [0, 4],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3],
            [1, 4],
        ],
        [
            [2, 0],
            [2, 1],
            [2, 2],
            [2, 3],
            [2, 4],
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
            [3, 4],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [4, 4],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
            [5, 4],
        ],
        [
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [6, 4],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [7, 4],
        ],
        [
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
            [8, 4],
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
        ],
        [
            [0, 5],
            [0, 6],
            [0, 7],
            [0, 8],
            [0, 9],
            [1, 5],
            [1, 6],
            [1, 7],
            [1, 8],
            [1, 9],
        ],
        [
            [2, 5],
            [2, 6],
            [2, 7],
            [2, 8],
            [2, 9],
            [3, 5],
            [3, 6],
            [3, 7],
            [3, 8],
            [3, 9],
        ],
        [
            [4, 5],
            [4, 6],
            [4, 7],
            [4, 8],
            [4, 9],
            [5, 5],
            [5, 6],
            [5, 7],
            [5, 8],
            [5, 9],
        ],
        [
            [6, 5],
            [6, 6],
            [6, 7],
            [6, 8],
            [6, 9],
            [7, 5],
            [7, 6],
            [7, 7],
            [7, 8],
            [7, 9],
        ],
        [
            [8, 5],
            [8, 6],
            [8, 7],
            [8, 8],
            [8, 9],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get10x10Ladder(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 0],
        ],
        [
            [3, 1],
            [3, 2],
            [4, 1],
            [4, 2],
            [5, 1],
            [5, 2],
            [6, 1],
            [6, 2],
            [4, 0],
            [5, 0],
        ],
        [
            [6, 0],
            [7, 0],
            [8, 0],
            [9, 0],
            [7, 1],
            [7, 2],
            [8, 1],
            [8, 2],
            [9, 1],
            [9, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [0, 5],
            [0, 6],
            [0, 7],
            [1, 3],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
        ],
        [
            [2, 3],
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
            [3, 3],
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
        ],
        [
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [5, 3],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
        ],
        [
            [6, 3],
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
        ],
        [
            [8, 3],
            [8, 4],
            [8, 5],
            [8, 6],
            [8, 7],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
        ],
        [
            [0, 8],
            [0, 9],
            [1, 8],
            [1, 9],
            [2, 8],
            [2, 9],
            [3, 8],
            [3, 9],
            [4, 8],
            [4, 9],
        ],
        [
            [5, 8],
            [5, 9],
            [6, 8],
            [6, 9],
            [7, 8],
            [7, 9],
            [8, 8],
            [8, 9],
            [9, 8],
            [9, 9],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get10x10Ladder2(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 0],
        ],
        [
            [4, 0],
            [5, 0],
            [3, 1],
            [3, 2],
            [4, 1],
            [4, 2],
            [5, 1],
            [5, 2],
            [6, 1],
            [6, 2],
        ],
        [
            [6, 0],
            [7, 0],
            [8, 0],
            [9, 0],
            [7, 1],
            [7, 2],
            [8, 1],
            [8, 2],
            [9, 1],
            [9, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [0, 5],
            [0, 6],
            [1, 3],
            [1, 4],
            [1, 5],
            [1, 6],
            [2, 4],
            [2, 5],
        ],
        [
            [2, 3],
            [2, 6],
            [3, 3],
            [3, 4],
            [3, 5],
            [3, 6],
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
        ],
        [
            [5, 3],
            [5, 4],
            [5, 5],
            [5, 6],
            [6, 3],
            [6, 4],
            [6, 5],
            [6, 6],
            [7, 3],
            [7, 6],
        ],
        [
            [7, 4],
            [7, 5],
            [8, 3],
            [8, 4],
            [8, 5],
            [8, 6],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
        ],
        [
            [0, 7],
            [0, 8],
            [0, 9],
            [1, 7],
            [1, 8],
            [1, 9],
            [2, 7],
            [2, 8],
            [2, 9],
            [3, 9],
        ],
        [
            [3, 7],
            [3, 8],
            [4, 7],
            [4, 8],
            [5, 7],
            [5, 8],
            [6, 7],
            [6, 8],
            [4, 9],
            [5, 9],
        ],
        [
            [6, 9],
            [7, 9],
            [8, 9],
            [9, 9],
            [7, 7],
            [7, 8],
            [8, 7],
            [8, 8],
            [9, 7],
            [9, 8],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get10x10Diagonal(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [1, 0],
            [2, 0],
            [3, 0],
            [0, 1],
            [1, 1],
            [2, 1],
            [0, 2],
            [1, 2],
            [0, 3],
        ],
        [
            [5, 0],
            [4, 0],
            [4, 1],
            [3, 1],
            [3, 2],
            [2, 2],
            [2, 3],
            [1, 3],
            [1, 4],
            [0, 4],
        ],
        [
            [7, 0],
            [6, 0],
            [6, 1],
            [5, 1],
            [5, 2],
            [4, 2],
            [4, 3],
            [3, 3],
            [3, 4],
            [2, 4],
        ],
        [
            [9, 0],
            [8, 0],
            [8, 1],
            [7, 1],
            [7, 2],
            [6, 2],
            [6, 3],
            [5, 3],
            [5, 4],
            [4, 4],
        ],
        [
            [9, 1],
            [9, 2],
            [9, 3],
            [9, 4],
            [8, 2],
            [8, 3],
            [8, 4],
            [7, 3],
            [7, 4],
            [6, 4],
        ],
        [
            [0, 5],
            [0, 6],
            [0, 7],
            [0, 8],
            [1, 5],
            [1, 6],
            [1, 7],
            [2, 5],
            [2, 6],
            [3, 5],
        ],
        [
            [5, 5],
            [4, 5],
            [4, 6],
            [3, 6],
            [3, 7],
            [2, 7],
            [2, 8],
            [1, 8],
            [1, 9],
            [0, 9],
        ],
        [
            [7, 5],
            [6, 5],
            [6, 6],
            [5, 6],
            [5, 7],
            [4, 7],
            [4, 8],
            [3, 8],
            [3, 9],
            [2, 9],
        ],
        [
            [9, 5],
            [8, 5],
            [8, 6],
            [7, 6],
            [7, 7],
            [6, 7],
            [6, 8],
            [5, 8],
            [5, 9],
            [4, 9],
        ],
        [
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [8, 7],
            [8, 8],
            [8, 9],
            [7, 8],
            [7, 9],
            [6, 9],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get10x10Diamond(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 0],
            [2, 1],
            [3, 0],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [3, 1],
            [3, 2],
            [3, 3],
            [2, 2],
            [2, 3],
            [1, 3],
        ],
        [
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
            [6, 1],
            [6, 2],
            [6, 3],
            [7, 2],
            [7, 3],
            [8, 3],
        ],
        [
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [8, 0],
            [8, 1],
            [8, 2],
            [7, 0],
            [7, 1],
            [6, 0],
        ],
        [
            [0, 4],
            [0, 5],
            [1, 4],
            [1, 5],
            [2, 4],
            [2, 5],
            [3, 4],
            [3, 5],
            [4, 4],
            [4, 5],
        ],
        [
            [5, 4],
            [5, 5],
            [6, 4],
            [6, 5],
            [7, 4],
            [7, 5],
            [8, 4],
            [8, 5],
            [9, 4],
            [9, 5],
        ],
        [
            [0, 6],
            [0, 7],
            [0, 8],
            [0, 9],
            [1, 7],
            [1, 8],
            [1, 9],
            [2, 8],
            [2, 9],
            [3, 9],
        ],
        [
            [4, 6],
            [4, 7],
            [4, 8],
            [4, 9],
            [3, 6],
            [3, 7],
            [3, 8],
            [2, 6],
            [2, 7],
            [1, 6],
        ],
        [
            [5, 6],
            [5, 7],
            [5, 8],
            [5, 9],
            [6, 6],
            [6, 7],
            [6, 8],
            [7, 6],
            [7, 7],
            [8, 6],
        ],
        [
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [8, 7],
            [8, 8],
            [8, 9],
            [7, 8],
            [7, 9],
            [6, 9],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get12x12Brickwall(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [0, 3],
            [1, 0],
            [1, 1],
            [1, 2],
            [1, 3],
            [2, 0],
            [2, 1],
            [2, 2],
            [2, 3],
        ],
        [
            [3, 0],
            [3, 1],
            [3, 2],
            [3, 3],
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
        ],
        [
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
        ],
        [
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [10, 0],
            [10, 1],
            [10, 2],
            [10, 3],
            [11, 0],
            [11, 1],
            [11, 2],
            [11, 3],
        ],
        [
            [0, 4],
            [0, 5],
            [0, 6],
            [0, 7],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
        ],
        [
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
        ],
        [
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [8, 4],
            [8, 5],
            [8, 6],
            [8, 7],
        ],
        [
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [10, 4],
            [10, 5],
            [10, 6],
            [10, 7],
            [11, 4],
            [11, 5],
            [11, 6],
            [11, 7],
        ],
        [
            [0, 8],
            [0, 9],
            [0, 10],
            [0, 11],
            [1, 8],
            [1, 9],
            [1, 10],
            [1, 11],
            [2, 8],
            [2, 9],
            [2, 10],
            [2, 11],
        ],
        [
            [3, 8],
            [3, 9],
            [3, 10],
            [3, 11],
            [4, 8],
            [4, 9],
            [4, 10],
            [4, 11],
            [5, 8],
            [5, 9],
            [5, 10],
            [5, 11],
        ],
        [
            [6, 8],
            [6, 9],
            [6, 10],
            [6, 11],
            [7, 8],
            [7, 9],
            [7, 10],
            [7, 11],
            [8, 8],
            [8, 9],
            [8, 10],
            [8, 11],
        ],
        [
            [9, 8],
            [9, 9],
            [9, 10],
            [9, 11],
            [10, 8],
            [10, 9],
            [10, 10],
            [10, 11],
            [11, 8],
            [11, 9],
            [11, 10],
            [11, 11],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get12x12Cross(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 0],
            [3, 1],
            [3, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [0, 5],
            [1, 3],
            [1, 4],
            [1, 5],
            [2, 3],
            [2, 4],
            [2, 5],
            [3, 3],
            [3, 4],
            [3, 5],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 0],
            [5, 1],
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
        ],
        [
            [0, 6],
            [0, 7],
            [1, 6],
            [1, 7],
            [2, 6],
            [2, 7],
            [3, 6],
            [3, 7],
            [4, 6],
            [4, 7],
            [5, 6],
            [5, 7],
        ],
        [
            [0, 8],
            [0, 9],
            [0, 10],
            [0, 11],
            [1, 8],
            [1, 9],
            [1, 10],
            [1, 11],
            [2, 8],
            [2, 9],
            [2, 10],
            [2, 11],
        ],
        [
            [3, 8],
            [3, 9],
            [3, 10],
            [3, 11],
            [4, 8],
            [4, 9],
            [4, 10],
            [4, 11],
            [5, 8],
            [5, 9],
            [5, 10],
            [5, 11],
        ],
        [
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
        ],
        [
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [10, 0],
            [10, 1],
            [10, 2],
            [10, 3],
            [11, 0],
            [11, 1],
            [11, 2],
            [11, 3],
        ],
        [
            [6, 4],
            [6, 5],
            [7, 4],
            [7, 5],
            [8, 4],
            [8, 5],
            [9, 4],
            [9, 5],
            [10, 4],
            [10, 5],
            [11, 4],
            [11, 5],
        ],
        [
            [6, 6],
            [6, 7],
            [6, 8],
            [6, 9],
            [6, 10],
            [6, 11],
            [7, 6],
            [7, 7],
            [7, 8],
            [7, 9],
            [7, 10],
            [7, 11],
        ],
        [
            [8, 6],
            [8, 7],
            [8, 8],
            [9, 6],
            [9, 7],
            [9, 8],
            [10, 6],
            [10, 7],
            [10, 8],
            [11, 6],
            [11, 7],
            [11, 8],
        ],
        [
            [8, 9],
            [8, 10],
            [8, 11],
            [9, 9],
            [9, 10],
            [9, 11],
            [10, 9],
            [10, 10],
            [10, 11],
            [11, 9],
            [11, 10],
            [11, 11],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get12x12ShortAndLong(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [1, 0],
            [1, 1],
            [2, 0],
            [2, 1],
            [3, 0],
            [3, 1],
            [4, 0],
            [4, 1],
            [5, 0],
            [5, 1],
        ],
        [
            [0, 2],
            [0, 3],
            [0, 4],
            [0, 5],
            [1, 2],
            [1, 3],
            [1, 4],
            [1, 5],
            [2, 2],
            [2, 3],
            [2, 4],
            [2, 5],
        ],
        [
            [3, 2],
            [3, 3],
            [3, 4],
            [3, 5],
            [4, 2],
            [4, 3],
            [4, 4],
            [4, 5],
            [5, 2],
            [5, 3],
            [5, 4],
            [5, 5],
        ],
        [
            [0, 6],
            [0, 7],
            [1, 6],
            [1, 7],
            [2, 6],
            [2, 7],
            [3, 6],
            [3, 7],
            [4, 6],
            [4, 7],
            [5, 6],
            [5, 7],
        ],
        [
            [0, 8],
            [0, 9],
            [0, 10],
            [0, 11],
            [1, 8],
            [1, 9],
            [1, 10],
            [1, 11],
            [2, 8],
            [2, 9],
            [2, 10],
            [2, 11],
        ],
        [
            [3, 8],
            [3, 9],
            [3, 10],
            [3, 11],
            [4, 8],
            [4, 9],
            [4, 10],
            [4, 11],
            [5, 8],
            [5, 9],
            [5, 10],
            [5, 11],
        ],
        [
            [6, 0],
            [6, 1],
            [6, 2],
            [6, 3],
            [7, 0],
            [7, 1],
            [7, 2],
            [7, 3],
            [8, 0],
            [8, 1],
            [8, 2],
            [8, 3],
        ],
        [
            [9, 0],
            [9, 1],
            [9, 2],
            [9, 3],
            [10, 0],
            [10, 1],
            [10, 2],
            [10, 3],
            [11, 0],
            [11, 1],
            [11, 2],
            [11, 3],
        ],
        [
            [6, 4],
            [6, 5],
            [7, 4],
            [7, 5],
            [8, 4],
            [8, 5],
            [9, 4],
            [9, 5],
            [10, 4],
            [10, 5],
            [11, 4],
            [11, 5],
        ],
        [
            [6, 6],
            [6, 7],
            [6, 8],
            [6, 9],
            [7, 6],
            [7, 7],
            [7, 8],
            [7, 9],
            [8, 6],
            [8, 7],
            [8, 8],
            [8, 9],
        ],
        [
            [9, 6],
            [9, 7],
            [9, 8],
            [9, 9],
            [10, 6],
            [10, 7],
            [10, 8],
            [10, 9],
            [11, 6],
            [11, 7],
            [11, 8],
            [11, 9],
        ],
        [
            [6, 10],
            [6, 11],
            [7, 10],
            [7, 11],
            [8, 10],
            [8, 11],
            [9, 10],
            [9, 11],
            [10, 10],
            [10, 11],
            [11, 10],
            [11, 11],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

function get12x12Ladder(i: number, j: number): SudokuPatternModelBlock {
    const blocks: [number, number][][] = [
        [
            [0, 0],
            [0, 1],
            [0, 2],
            [1, 0],
            [1, 1],
            [1, 2],
            [2, 0],
            [2, 1],
            [2, 2],
            [3, 0],
            [3, 1],
            [3, 2],
        ],
        [
            [4, 0],
            [4, 1],
            [4, 2],
            [5, 0],
            [5, 1],
            [5, 2],
            [6, 0],
            [6, 1],
            [6, 2],
            [7, 0],
            [7, 1],
            [7, 2],
        ],
        [
            [8, 0],
            [8, 1],
            [8, 2],
            [9, 0],
            [9, 1],
            [9, 2],
            [10, 0],
            [10, 1],
            [10, 2],
            [11, 0],
            [11, 1],
            [11, 2],
        ],
        [
            [0, 3],
            [0, 4],
            [0, 5],
            [0, 6],
            [0, 7],
            [0, 8],
            [1, 3],
            [1, 4],
            [1, 5],
            [1, 6],
            [1, 7],
            [1, 8],
        ],
        [
            [2, 3],
            [2, 4],
            [2, 5],
            [2, 6],
            [2, 7],
            [2, 8],
            [3, 3],
            [3, 4],
            [3, 5],
            [3, 6],
            [3, 7],
            [3, 8],
        ],
        [
            [4, 3],
            [4, 4],
            [4, 5],
            [4, 6],
            [4, 7],
            [4, 8],
            [5, 3],
            [5, 4],
            [5, 5],
            [5, 6],
            [5, 7],
            [5, 8],
        ],
        [
            [6, 3],
            [6, 4],
            [6, 5],
            [6, 6],
            [6, 7],
            [6, 8],
            [7, 3],
            [7, 4],
            [7, 5],
            [7, 6],
            [7, 7],
            [7, 8],
        ],
        [
            [8, 3],
            [8, 4],
            [8, 5],
            [8, 6],
            [8, 7],
            [8, 8],
            [9, 3],
            [9, 4],
            [9, 5],
            [9, 6],
            [9, 7],
            [9, 8],
        ],
        [
            [10, 3],
            [10, 4],
            [10, 5],
            [10, 6],
            [10, 7],
            [10, 8],
            [11, 3],
            [11, 4],
            [11, 5],
            [11, 6],
            [11, 7],
            [11, 8],
        ],
        [
            [0, 9],
            [0, 10],
            [0, 11],
            [1, 9],
            [1, 10],
            [1, 11],
            [2, 9],
            [2, 10],
            [2, 11],
            [3, 9],
            [3, 10],
            [3, 11],
        ],
        [
            [4, 9],
            [4, 10],
            [4, 11],
            [5, 9],
            [5, 10],
            [5, 11],
            [6, 9],
            [6, 10],
            [6, 11],
            [7, 9],
            [7, 10],
            [7, 11],
        ],
        [
            [8, 9],
            [8, 10],
            [8, 11],
            [9, 9],
            [9, 10],
            [9, 11],
            [10, 9],
            [10, 10],
            [10, 11],
            [11, 9],
            [11, 10],
            [11, 11],
        ],
    ];

    for (const block of blocks) {
        for (const item of block) {
            if (i === item[0] && j === item[1]) {
                return block.map((c) => [c[0], c[1]]);
            }
        }
    }
    throw new Error('ERROR');
}

writeToFile(generatePatternModel(4, getAnyRegular), 'regular');

writeToFile(generatePatternModel(5, get5x5Cross), 'cross');

writeToFile(generatePatternModel(6, get6x6Brickwall), 'brickwall');
writeToFile(generatePatternModel(6, get6x6Ladder), 'ladder');

writeToFile(generatePatternModel(7, get7x7Diagonal), 'diagonal');

writeToFile(generatePatternModel(8, get8x8Brickwall), 'brickwall');
writeToFile(generatePatternModel(8, get8x8Ladder), 'ladder');
writeToFile(generatePatternModel(8, get8x8Cross), 'cross');

writeToFile(generatePatternModel(9, getAnyRegular), 'regular');

writeToFile(generatePatternModel(10, get10x10Brickwall), 'brickwall');
writeToFile(generatePatternModel(10, get10x10Ladder), 'ladder');
writeToFile(generatePatternModel(10, get10x10Ladder2), 'ladder-2');
writeToFile(generatePatternModel(10, get10x10Diagonal), 'diagonal');
writeToFile(generatePatternModel(10, get10x10Diamond), 'diamond');

writeToFile(generatePatternModel(12, get12x12Brickwall), 'brickwall');
writeToFile(generatePatternModel(12, get12x12Cross), 'cross');
writeToFile(generatePatternModel(12, get12x12ShortAndLong), 'short-and-long');
writeToFile(generatePatternModel(12, get12x12Ladder), 'ladder');

writeToFile(generatePatternModel(16, getAnyRegular), 'regular');
